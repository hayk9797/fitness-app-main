const bcrypt = require('bcrypt');
const userModel = require('../models/userModel');

// KayÄ±t formunu gÃ¶ster
function showRegisterForm(req, res) {
  res.render('register', { title: "Zarejestruj siÄ™", error: null });
}

// GiriÅŸ formunu gÃ¶ster
function showLoginForm(req, res) {
  res.render('login', { title: "Zaloguj siÄ™", error: null });
}

// Yeni kullanÄ±cÄ± oluÅŸtur
async function registerUser(req, res) {
  const { username, password } = req.body;

  // ðŸ§  Åžifre gÃ¼venlik kontrolÃ¼
  const isStrongPassword = password.length >= 6 && /[A-Za-z]/.test(password) && /\d/.test(password);
  if (!isStrongPassword) {
    return res.render('register', {
      title: 'Zarejestruj siÄ™',
      error: 'HasÅ‚o musi zawieraÄ‡ co najmniej 6 znakÃ³w, w tym litery i cyfry.'
    });
  }

  const users = await userModel.loadUsers();
  const existingUser = users.find(u => u.username === username);

  if (existingUser) {
    return res.render('register', {
      title: 'Zarejestruj siÄ™',
      error: 'Ta nazwa uÅ¼ytkownika jest juÅ¼ zajÄ™ta.'
    });
  }

  const hashedPassword = bcrypt.hashSync(password, 10);
  await userModel.createUser({ username, password: hashedPassword });
  res.redirect('/login');
}

// GiriÅŸ iÅŸlemi
async function loginUser(req, res) {
  const { username, password } = req.body;
  const user = await userModel.findUserByUsername(username);

  if (!user) {
    return res.send("UÅ¼ytkownik nie zostaÅ‚ znaleziony.");
  }

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.send("NieprawidÅ‚owe hasÅ‚o.");
  }

  req.session.userId = user.id;
  res.redirect('/');
}

// Ã‡Ä±kÄ±ÅŸ iÅŸlemi
function logoutUser(req, res) {
  req.session.destroy(() => {
    res.redirect('/login');
  });
}

module.exports = {
  showRegisterForm,
  showLoginForm,
  registerUser,
  loginUser,
  logoutUser
};
